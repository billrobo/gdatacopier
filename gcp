#!/usr/bin/env python

"""

	gcp
	GDataCopier, http://gdatacopier.googlecode.com/
	
	Copyright 2009 Eternity Technologies.
	Distributed under the terms and conditions of the GNU/GPL v3
	
	GDataCopier is free software and comes with absolutely NO WARRANTY. Use 
	of this software is completely at YOUR OWN RISK.
	
	Version 2.0
	
	Requires:
		
		- Python 2.5
		- Python GData API 2.0+
		
	Summary:
		
	GDataCopier originally started as a backup utility for Google Documents.
	When first published GData API didn't allow downloading documents, GDataCopier
	pretended to Firefox and perform the interactions required to download the
	documents.
	
	Since GData 2.0 Google has incorporated downloading documents into the API.
	As of Version 2.0 GDataCopier provides a cp like command line utility to ease
	backup of Google Documents simpler for System Administrators.

	Usage:
	
	gcp --[options] username@domain.com:/[doctype]/* /home/devraj
	
	doctype:
	
	docs			for documents
	sheets			for spreadsheets
	slides			for presentations
	
	Options:
	
	--metadata		Exports meta information for each download
	--password=		Option to provide password on the command line
	--log=			Asks gcp to write to syslog	
	--format=		pdf, doc, oo (default), txt, xls
	
"""

_GCP_VERSION = 2.0
_SYSLOG = False

"""
	Imports the required modules 
"""

try:
	from optparse import OptionParser
	import sys
	import os
	import re
	import signal
except:
	print "gcp failed to find some basic python modules, please validate the environment"

try:
	import gdata.docs
	import gdata.docs.service
except:
	print "gcp %s required GData Python API version 2.0 or above, downloadable from" % _GCP_VERSION
	print "<http://code.google.com/p/gdata-python-client/>"
	exit(1)


def export_file(source_path, target_path):
	return
	
	
def import_file(source_path, target_path):
	return
	
def option_parser():
	
	usage = "usage: %prog [options] username@domain.com:/docs/* /home/username/directory"
	parser = OptionParser(usage)
	
	parser.add_option('-m', '--metadata', action = 'store_true', dest = 'metadata', default = False, 
						help = 'Exports metadata for exported documents')
	parser.add_option('-p', '--password', dest = 'password', 
						help = 'Password to login to Google document servers')
	parser.add_option('-l', '--log', action = 'store_true', dest = 'log', default = True, 
						help = 'Writes actions to system logger, adjustlog levels to capture messages')
	parser.add_option('-f', '--format', default = 'oo',
						help = 'File format to export documents to, ensure to use default if exporting mixed types')
						
	(options, args) = parser.parse_args()
	
	"""
		If arg1 is remote server then we are exporting documents, otherwise we are
		importing documents into the Google document system
	"""

"""
	Prints Greeting mechanism
"""
def greet():
	print "gcp %s, bi-directional copy utility for the Google document system" % _GCP_VERSION
	print "Released under the GNU/GPL v3, <http://gdatacopier.googlecode.com/>"
	

"""
	main() is where things come together, this joins all the messages defined above
	these messages must be executed in the defined order
"""
def main():
	greet()
	option_parser()
	return
	
if __name__ == "__main__":
	main()
	
"""
	End of Python file
"""